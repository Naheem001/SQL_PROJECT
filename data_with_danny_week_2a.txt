Case Study #2 - Pizza Runner
Introduction
Did you know that over 115 million kilograms of pizza is consumed daily worldwide??? (Well according to Wikipedia anyway…)

Danny was scrolling through his Instagram feed when something really caught his eye - “80s Retro Styling and Pizza Is The Future!”

Danny was sold on the idea, but he knew that pizza alone was not going to help him get seed funding to expand his new Pizza Empire -
so he had one more genius idea to combine with it - he was going to Uberize it - and so Pizza Runner was launched!

Danny started by recruiting “runners” to deliver fresh pizza from Pizza Runner Headquarters (otherwise known as Danny’s house) and 
also maxed out his credit card to pay freelance developers to build a mobile app to accept orders from customers.

Case Study Questions- A. Pizza Metrics
here id the link to read more about the case study- https://8weeksqlchallenge.com/case-study-2/



CREATE SCHEMA pizza_runner;
SET search_path = pizza_runner;

DROP TABLE IF EXISTS runners;
CREATE TABLE runners (
  "runner_id" INTEGER,
  "registration_date" DATE
);
INSERT INTO runners
  ("runner_id", "registration_date")
VALUES
  (1, '2021-01-01'),
  (2, '2021-01-03'),
  (3, '2021-01-08'),
  (4, '2021-01-15');


DROP TABLE IF EXISTS customer_orders;
CREATE TABLE customer_orders (
  "order_id" INTEGER,
  "customer_id" INTEGER,
  "pizza_id" INTEGER,
  "exclusions" VARCHAR(4),
  "extras" VARCHAR(4),
  "order_time" TIMESTAMP
);

INSERT INTO customer_orders
  ("order_id", "customer_id", "pizza_id", "exclusions", "extras", "order_time")
VALUES
  ('1', '101', '1', '', '', '2020-01-01 18:05:02'),
  ('2', '101', '1', '', '', '2020-01-01 19:00:52'),
  ('3', '102', '1', '', '', '2020-01-02 23:51:23'),
  ('3', '102', '2', '', NULL, '2020-01-02 23:51:23'),
  ('4', '103', '1', '4', '', '2020-01-04 13:23:46'),
  ('4', '103', '1', '4', '', '2020-01-04 13:23:46'),
  ('4', '103', '2', '4', '', '2020-01-04 13:23:46'),
  ('5', '104', '1', 'null', '1', '2020-01-08 21:00:29'),
  ('6', '101', '2', 'null', 'null', '2020-01-08 21:03:13'),
  ('7', '105', '2', 'null', '1', '2020-01-08 21:20:29'),
  ('8', '102', '1', 'null', 'null', '2020-01-09 23:54:33'),
  ('9', '103', '1', '4', '1, 5', '2020-01-10 11:22:59'),
  ('10', '104', '1', 'null', 'null', '2020-01-11 18:34:49'),
  ('10', '104', '1', '2, 6', '1, 4', '2020-01-11 18:34:49');


DROP TABLE IF EXISTS runner_orders;
CREATE TABLE runner_orders (
  "order_id" INTEGER,
  "runner_id" INTEGER,
  "pickup_time" VARCHAR(19),
  "distance" VARCHAR(7),
  "duration" VARCHAR(10),
  "cancellation" VARCHAR(23)
);

INSERT INTO runner_orders
  ("order_id", "runner_id", "pickup_time", "distance", "duration", "cancellation")
VALUES
  ('1', '1', '2020-01-01 18:15:34', '20km', '32 minutes', ''),
  ('2', '1', '2020-01-01 19:10:54', '20km', '27 minutes', ''),
  ('3', '1', '2020-01-03 00:12:37', '13.4km', '20 mins', NULL),
  ('4', '2', '2020-01-04 13:53:03', '23.4', '40', NULL),
  ('5', '3', '2020-01-08 21:10:57', '10', '15', NULL),
  ('6', '3', 'null', 'null', 'null', 'Restaurant Cancellation'),
  ('7', '2', '2020-01-08 21:30:45', '25km', '25mins', 'null'),
  ('8', '2', '2020-01-10 00:15:02', '23.4 km', '15 minute', 'null'),
  ('9', '2', 'null', 'null', 'null', 'Customer Cancellation'),
  ('10', '1', '2020-01-11 18:50:20', '10km', '10minutes', 'null');


DROP TABLE IF EXISTS pizza_names;
CREATE TABLE pizza_names (
  "pizza_id" INTEGER,
  "pizza_name" NVARCHAR(MAX)
);
INSERT INTO pizza_names
  ("pizza_id", "pizza_name")
VALUES
  (1, 'Meatlovers'),
  (2, 'Vegetarian');


DROP TABLE IF EXISTS pizza_recipes;
CREATE TABLE pizza_recipes (
  "pizza_id" INTEGER,
  "toppings" TEXT
);
INSERT INTO pizza_recipes
  ("pizza_id", "toppings")
VALUES
  (1, '1, 2, 3, 4, 5, 6, 8, 10'),
  (2, '4, 6, 7, 9, 11, 12');


DROP TABLE IF EXISTS pizza_toppings;
CREATE TABLE pizza_toppings (
  "topping_id" INTEGER,
  "topping_name" TEXT
);
INSERT INTO pizza_toppings
  ("topping_id", "topping_name")
VALUES
  (1, 'Bacon'),
  (2, 'BBQ Sauce'),
  (3, 'Beef'),
  (4, 'Cheese'),
  (5, 'Chicken'),
  (6, 'Mushrooms'),
  (7, 'Onions'),
  (8, 'Pepperoni'),
  (9, 'Peppers'),
  (10, 'Salami'),
  (11, 'Tomatoes'),
  (12, 'Tomato Sauce'); 
  
  
  
  
1.How many pizzas were ordered?
select count(*) AS Pizzas_ordered
from customer_orders

2.How many unique customer orders were made?
select Count(distinct order_id)  AS Unique_customerOrders
from customer_orders

3.How many successful orders were delivered by each runner?
Select runner_id, Count( ro.order_id) as delivered_orders 
From runner_orders as ro  
where pickup_time <>'null' 
Group by runner_id; 


4.How many of each type of pizza was delivered?

select
pn.pizza_name,
count(co.order_id) as pizza_d
from runner_orders as ro
Inner Join customer_orders as co on ro.order_id = co.order_id 
inner join pizza_names as pn on co.pizza_id = pn.pizza_id 
where pickup_time<>'null'
group by pizza_name;



5.How many Vegetarian and Meatlovers were ordered by each customer?

Select 
co.customer_id, 
pn.pizza_name, 
Count(co.pizza_id) as pizzas_ordered 
from customer_orders as co 
inner join pizza_names as pn on co.pizza_id = pn.pizza_id 
Group by pn.pizza_name, 
co.customer_id;  

6.What was the maximum number of pizzas delivered in a single order? 

select TOP 1
co.order_id, 
count(co.pizza_id) as pizzas_ordered 
from customer_orders as co 
inner join runner_orders as ro on co.order_id = ro.order_id 
where pickup_time <> 'null' 
Group by co.order_id 
ORDER by COUNT(CO.PIZZA_ID) DESC



7.For each customer, how many delivered pizzas had at least 1 change and how many had no changes?
 
SELECT 
co.customer_id,
SUM(CASE 
WHEN  
        exclusions <> 'null' AND LEN(exclusions)>0
        or extras <> 'null' AND LEN(exclusions)>0 
THEN 1
ELSE 0
END) as changes,

SUM(CASE
WHEN
      exclusions <> 'null' AND LEN(exclusions)>0
        or extras <> 'null' AND LEN(exclusions)>0 
     
THEN 0
ELSE 1 
END )as no_changes 
FROM customer_orders as co
Inner join runner_orders as ro on ro.order_id = co.order_id 
where pickup_time <> 'null' 
GROUP BY co.customer_id;

8.How many pizzas were delivered that had both exclusions and extras?

SELECT 
COUNT(pizza_id) as pizza_delivered_with_exclusion_and_extra 
from customer_orders as co 
Inner JOIN runner_orders  as ro on ro.order_id = co.order_id 
where pickup_time <> 'null'
AND (exclusions <> 'null' AND LEN(exclusions)>0) AND
(extras <> 'null'AND LEN(extras)>0)
    
9.What was the total volume of pizzas ordered for each hour of the day?
SELECT 
DATEPART(HOUR,order_time) as hour,
COUNT(pizza_id) as pizzas_ordered 
from customer_orders 
GROUP BY DATEPART(hour,order_time); 

10.What was the volume of orders for each day of the week?
WITH CTE AS(
SELECT 
DATEPART(day,order_time)  as day, 
DATENAME(dw,order_time) as day_of_the_week,
COUNT(pizza_id) as pizzas_ordered 
from customer_orders 
GROUP BY DATEPART(day,order_time),DATENAME(dw,order_time) 
)
SELECT day_of_the_week,SUM(pizzas_ordered ) As Orders_of_the_week from CTE 
group by day_of_the_week 
order by Orders_of_the_week DESC